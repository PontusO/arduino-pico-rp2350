; Cycle Count for the Raspberry Pi Pico RP2040
;
; Copyright (c) 2022 Earle F. Philhower, III <earlephilhower@yahoo.com>
;
; This library is free software; you can redistribute it and/or
; modify it under the terms of the GNU Lesser General Public
; License as published by the Free Software Foundation; either
; version 2.1 of the License, or (at your option) any later version.
;
; This library is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; Lesser General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public
; License along with this library; if not, write to the Free Software
; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

; Cycle count is stored in {-y, -x}

.program ccount
cnt:
    jmp x-- cnt
epoch:
    jmp y-- cnt

% c-sdk {
static inline void ccount_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = ccount_program_get_default_config(offset);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 0));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));
}

static inline uint64_t ccount_read(PIO pio, uint sm) {
    static uint64_t extra = 0;
    // Guard against having the epoch rollover while we're reading the time.
    // If epoch2 != epoch1, we looped in middle and get new LSW
    pio_sm_exec(pio, sm, pio_encode_mov(pio_isr, pio_y));
    pio_sm_exec(pio, sm, pio_encode_push(false, false));
    pio_sm_exec(pio, sm, pio_encode_mov(pio_isr, pio_x));
    pio_sm_exec(pio, sm, pio_encode_push(false, false));
    pio_sm_exec(pio, sm, pio_encode_mov(pio_isr, pio_y));
    pio_sm_exec(pio, sm, pio_encode_push(false, false));
    pio_sm_exec(pio, sm, pio_encode_mov(pio_isr, pio_x));
    pio_sm_exec(pio, sm, pio_encode_push(false, false));
    extra += 8;
    uint32_t y1 = -((int)pio_sm_get_blocking(pio, sm));
    uint32_t x1 = -((int)pio_sm_get_blocking(pio, sm));
    uint32_t y2 = -((int)pio_sm_get_blocking(pio, sm));
    uint32_t x2 = -((int)pio_sm_get_blocking(pio, sm));
    uint64_t val;
    if (y2 != y1) {
        val = ((((uint64_t)y2) << 32LL) | x2) + y2 /* adjust for missed cycle every epoch increment */;
    } else {
        val = ((((uint64_t)y1) << 32LL) | x1) + y1 /* adjust for missed cycle every epoch increment */;
    }
    return val + extra;
}

%}

